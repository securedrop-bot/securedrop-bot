// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package securedropbot

import (
	"context"
	"github.com/google/go-github/github"
	"sync"
)

var (
	lockpullRequestsServiceMockList          sync.RWMutex
	lockpullRequestsServiceMockListReviewers sync.RWMutex
	lockpullRequestsServiceMockListReviews   sync.RWMutex
)

// pullRequestsServiceMock is a mock implementation of pullRequestsService.
//
//     func TestSomethingThatUsespullRequestsService(t *testing.T) {
//
//         // make and configure a mocked pullRequestsService
//         mockedpullRequestsService := &pullRequestsServiceMock{
//             ListFunc: func(in1 context.Context, in2 string, in3 string, in4 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
// 	               panic("TODO: mock out the List method")
//             },
//             ListReviewersFunc: func(in1 context.Context, in2 string, in3 string, in4 int, in5 *github.ListOptions) (*github.Reviewers, *github.Response, error) {
// 	               panic("TODO: mock out the ListReviewers method")
//             },
//             ListReviewsFunc: func(in1 context.Context, in2 string, in3 string, in4 int, in5 *github.ListOptions) ([]*github.PullRequestReview, *github.Response, error) {
// 	               panic("TODO: mock out the ListReviews method")
//             },
//         }
//
//         // TODO: use mockedpullRequestsService in code that requires pullRequestsService
//         //       and then make assertions.
//
//     }
type pullRequestsServiceMock struct {
	// ListFunc mocks the List method.
	ListFunc func(in1 context.Context, in2 string, in3 string, in4 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)

	// ListReviewersFunc mocks the ListReviewers method.
	ListReviewersFunc func(in1 context.Context, in2 string, in3 string, in4 int, in5 *github.ListOptions) (*github.Reviewers, *github.Response, error)

	// ListReviewsFunc mocks the ListReviews method.
	ListReviewsFunc func(in1 context.Context, in2 string, in3 string, in4 int, in5 *github.ListOptions) ([]*github.PullRequestReview, *github.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
			// In3 is the in3 argument value.
			In3 string
			// In4 is the in4 argument value.
			In4 *github.PullRequestListOptions
		}
		// ListReviewers holds details about calls to the ListReviewers method.
		ListReviewers []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
			// In3 is the in3 argument value.
			In3 string
			// In4 is the in4 argument value.
			In4 int
			// In5 is the in5 argument value.
			In5 *github.ListOptions
		}
		// ListReviews holds details about calls to the ListReviews method.
		ListReviews []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
			// In3 is the in3 argument value.
			In3 string
			// In4 is the in4 argument value.
			In4 int
			// In5 is the in5 argument value.
			In5 *github.ListOptions
		}
	}
}

// List calls ListFunc.
func (mock *pullRequestsServiceMock) List(in1 context.Context, in2 string, in3 string, in4 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	if mock.ListFunc == nil {
		panic("moq: pullRequestsServiceMock.ListFunc is nil but pullRequestsService.List was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
		In3 string
		In4 *github.PullRequestListOptions
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockpullRequestsServiceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockpullRequestsServiceMockList.Unlock()
	return mock.ListFunc(in1, in2, in3, in4)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedpullRequestsService.ListCalls())
func (mock *pullRequestsServiceMock) ListCalls() []struct {
	In1 context.Context
	In2 string
	In3 string
	In4 *github.PullRequestListOptions
} {
	var calls []struct {
		In1 context.Context
		In2 string
		In3 string
		In4 *github.PullRequestListOptions
	}
	lockpullRequestsServiceMockList.RLock()
	calls = mock.calls.List
	lockpullRequestsServiceMockList.RUnlock()
	return calls
}

// ListReviewers calls ListReviewersFunc.
func (mock *pullRequestsServiceMock) ListReviewers(in1 context.Context, in2 string, in3 string, in4 int, in5 *github.ListOptions) (*github.Reviewers, *github.Response, error) {
	if mock.ListReviewersFunc == nil {
		panic("moq: pullRequestsServiceMock.ListReviewersFunc is nil but pullRequestsService.ListReviewers was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
		In3 string
		In4 int
		In5 *github.ListOptions
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
		In5: in5,
	}
	lockpullRequestsServiceMockListReviewers.Lock()
	mock.calls.ListReviewers = append(mock.calls.ListReviewers, callInfo)
	lockpullRequestsServiceMockListReviewers.Unlock()
	return mock.ListReviewersFunc(in1, in2, in3, in4, in5)
}

// ListReviewersCalls gets all the calls that were made to ListReviewers.
// Check the length with:
//     len(mockedpullRequestsService.ListReviewersCalls())
func (mock *pullRequestsServiceMock) ListReviewersCalls() []struct {
	In1 context.Context
	In2 string
	In3 string
	In4 int
	In5 *github.ListOptions
} {
	var calls []struct {
		In1 context.Context
		In2 string
		In3 string
		In4 int
		In5 *github.ListOptions
	}
	lockpullRequestsServiceMockListReviewers.RLock()
	calls = mock.calls.ListReviewers
	lockpullRequestsServiceMockListReviewers.RUnlock()
	return calls
}

// ListReviews calls ListReviewsFunc.
func (mock *pullRequestsServiceMock) ListReviews(in1 context.Context, in2 string, in3 string, in4 int, in5 *github.ListOptions) ([]*github.PullRequestReview, *github.Response, error) {
	if mock.ListReviewsFunc == nil {
		panic("moq: pullRequestsServiceMock.ListReviewsFunc is nil but pullRequestsService.ListReviews was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
		In3 string
		In4 int
		In5 *github.ListOptions
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
		In5: in5,
	}
	lockpullRequestsServiceMockListReviews.Lock()
	mock.calls.ListReviews = append(mock.calls.ListReviews, callInfo)
	lockpullRequestsServiceMockListReviews.Unlock()
	return mock.ListReviewsFunc(in1, in2, in3, in4, in5)
}

// ListReviewsCalls gets all the calls that were made to ListReviews.
// Check the length with:
//     len(mockedpullRequestsService.ListReviewsCalls())
func (mock *pullRequestsServiceMock) ListReviewsCalls() []struct {
	In1 context.Context
	In2 string
	In3 string
	In4 int
	In5 *github.ListOptions
} {
	var calls []struct {
		In1 context.Context
		In2 string
		In3 string
		In4 int
		In5 *github.ListOptions
	}
	lockpullRequestsServiceMockListReviews.RLock()
	calls = mock.calls.ListReviews
	lockpullRequestsServiceMockListReviews.RUnlock()
	return calls
}
